% takes the transducer, grid, and function generater struct generated by
% characterizeTx.m and outputs a readme file with details of the transducer
% characterization
% 
% @INPUTS
%   Tx: struct describing transducer with fields
%       frequency: center frequency of Tx in MHz
%       diameter: Aperture diameter in mm
%       model: Model name
%       serial: Serial number
%       focalLength: focal length in mm (use zero if Tx is unfocused)
%   Grid: struct describing the data grid with fields
%       xStart: beginning point along x-axis
%       xEnd: end point along x-axis
%       yStart: beginning point along y-axis
%       yEnd: end point along y-axis
%       zStart: beginning point along z-axis.
%       zEnd: end point along z-axis. 
%       xPoints: number of points along x-axis.
%       yPoints: number of points along y-axis.
%       zPoints: number of points along z-axis.
%       averages: number of signal averages to acquire.
%   FgParams: struct describing function generator with fields
%       gridVoltage: FG voltage for full grid (mVpp)
%       maxVoltage: max FG voltage when testing Tx efficiency (mVpp)
%       frequency: center frequency in MHz
%       nCycles: number of cicles in pulse
%       burstPeriod: burst period in ms
%   saveDirectory: location to save the readme file
% 
% @OUTPUTS
%   None - written to a readme file.
% 
% Taylor Webb
% University of Utah

function writeReadme(Tx,Grid,FgParams,Hydrophone,PreAmp,saveDirectory)

fid = fopen([saveDirectory,'readme.txt'],'w');
now = clock;
fprintf(fid,'%s\n',['Created ', num2str(now(3)),'/',num2str(now(2)),'/',num2str(now(1)),...
    ' at ', num2str(now(4)),':',num2str(now(5))]);

fprintf(fid, '\n%s\n', 'Transducer Info (units: MHz, mm)');
fields = fieldnames(Tx);
for ii = 1:length(fields)
    if isnumeric(getfield(Tx,fields{ii}))
        fprintf(fid, '\t%s\n', [fields{ii},': ',num2str(getfield(Tx,fields{ii}))]); %#ok<*GFLD>
    else
        fprintf(fid, '\t%s\n', [fields{ii},': ',getfield(Tx,fields{ii})]);
    end
end

fprintf(fid, '\n%s\n', 'Hydrophone Info');
fields = fieldnames(Hydrophone);
for ii = 1:length(fields)
    if isnumeric(getfield(Hydrophone,fields{ii}))
        fprintf(fid, '\t%s\n', [fields{ii},': ',num2str(getfield(Hydrophone,fields{ii}))]); %#ok<*GFLD>
    else
        fprintf(fid, '\t%s\n', [fields{ii},': ',getfield(Hydrophone,fields{ii})]);
    end
end

fprintf(fid, '\n%s\n', 'Pre-Amp Info');
fields = fieldnames(PreAmp);
for ii = 1:length(fields)
    if isnumeric(getfield(PreAmp,fields{ii}))
        fprintf(fid, '\t%s\n', [fields{ii},': ',num2str(getfield(PreAmp,fields{ii}))]); %#ok<*GFLD>
    else
        fprintf(fid, '\t%s\n', [fields{ii},': ',getfield(PreAmp,fields{ii})]);
    end
end

fprintf(fid, '\n%s\n', 'Function Generator Info (units: mVpp, MHz, ms');
fields = fieldnames(FgParams);
for ii = 1:length(fields)
    if isnumeric(getfield(FgParams,fields{ii}))
        fprintf(fid, '\t%s\n', [fields{ii},': ',num2str(getfield(FgParams,fields{ii}))]); %#ok<*GFLD>
    else
        fprintf(fid, '\t%s\n', [fields{ii},': ',getfield(FgParams,fields{ii})]);
    end
end

fprintf(fid, '\n%s\n', 'Grid Info (units: mm)');
fields = fieldnames(Grid);
for ii = 1:length(fields)
    if isnumeric(getfield(Grid,fields{ii}))
        fprintf(fid, '\t%s\n', [fields{ii},': ',num2str(getfield(Grid,fields{ii}))]); %#ok<*GFLD>
    else
        fprintf(fid, '\t%s\n', [fields{ii},': ',getfield(Grid,fields{ii})]);
    end
end
fclose(fid);